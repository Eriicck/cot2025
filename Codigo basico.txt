¡Claro! Vamos paso a paso para que puedas ir construyendo la web.

FASE 1: Estructura y Estilo Básico (Frontend Estático)

Crea la Estructura de Carpetas:
En tu computadora, crea una carpeta principal para tu proyecto, por ejemplo, consultorio-web. Dentro de ella, crea:

Un archivo llamado index.html

Una carpeta llamada css y dentro de ella un archivo style.css

Una carpeta llamada js y dentro de ella un archivo main.js

Una carpeta llamada img (aquí pondrás tu logo, iconos y fotos de los doctores/consultorio).

consultorio-web/
├── index.html
├── css/
│   └── style.css
├── js/
│   └── main.js
└── img/
    ├── logo.png
    ├── logo-footer.png
    ├── icon-trauma.svg
    ├── icon-pedia.svg
    ├── icon-neuro.svg
    ├── (fotos de doctores, banner, etc.)


Pega el Código HTML Base:
Abre tu archivo index.html y pega el siguiente código completo:

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Consultorios Médicos - Traumatología, Pediatría y Neurología</title>
    <link rel="stylesheet" href="css/style.css">
    <!-- Font Awesome para iconos (opcional, pero recomendado) -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Leaflet CSS para el mapa -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
</head>
<body>

    <header>
        <div class="container header-container">
            <div class="logo-container">
                <!-- CAMBIA ESTO por la ruta a tu logo -->
                <img src="img/logo.png" alt="Logo Consultorios Médicos" id="logo">
            </div>
            <nav>
                <button class="nav-toggle" aria-label="Abrir menú">
                    <i class="fas fa-bars"></i>
                </button>
                <ul class="nav-menu">
                    <li><a href="#hero">Inicio</a></li>
                    <li><a href="#especialidades">Especialidades</a></li>
                    <li><a href="#profesionales">Nuestros Profesionales</a></li>
                    <li><a href="#turnos">Solicitar Turno</a></li>
                    <li><a href="#ubicacion">Ubicación</a></li>
                    <li><a href="#contacto">Contacto</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main>
        <section id="hero" class="hero-banner">
            <div class="container hero-content">
                <h1>Cuidado experto para toda la familia</h1>
                <p>Accede a nuestros especialistas en Traumatología, Pediatría y Neurología.</p>
                <a href="#turnos" class="btn btn-primary">Solicitar Turno Online</a>
            </div>
        </section>

        <section id="especialidades" class="section-padding">
            <div class="container">
                <h2>Nuestras Especialidades</h2>
                <div class="especialidades-grid">
                    <div class="especialidad-card" data-especialidad="traumatologia">
                        <!-- CAMBIA ESTO por la ruta a tu icono -->
                        <img src="img/icon-trauma.svg" alt="Icono Traumatología">
                        <h3>Traumatología</h3>
                        <p>Atención integral de lesiones musculoesqueléticas y articulares.</p>
                        <button class="btn btn-secondary btn-ver-profesionales">Ver Profesionales</button>
                    </div>
                    <div class="especialidad-card" data-especialidad="pediatria">
                        <!-- CAMBIA ESTO por la ruta a tu icono -->
                        <img src="img/icon-pedia.svg" alt="Icono Pediatría">
                        <h3>Pediatría</h3>
                        <p>Cuidado de la salud de niños y adolescentes, desde el nacimiento.</p>
                        <button class="btn btn-secondary btn-ver-profesionales">Ver Profesionales</button>
                    </div>
                    <div class="especialidad-card" data-especialidad="neurologia">
                        <!-- CAMBIA ESTO por la ruta a tu icono -->
                        <img src="img/icon-neuro.svg" alt="Icono Neurología">
                        <h3>Neurología</h3>
                        <p>Diagnóstico y tratamiento de enfermedades del sistema nervioso.</p>
                        <button class="btn btn-secondary btn-ver-profesionales">Ver Profesionales</button>
                    </div>
                </div>
            </div>
        </section>

        <section id="profesionales" class="section-padding bg-light" style="display:none;">
            <div class="container">
                <h2>Nuestros Profesionales <span id="nombre-especialidad-seleccionada"></span></h2>
                <div id="lista-profesionales" class="profesionales-grid">
                    <!-- Aquí se cargarán los profesionales con JS -->
                </div>
                <button id="btn-cerrar-profesionales" class="btn btn-tertiary">Cerrar</button>
            </div>
        </section>

        <section id="turnos" class="section-padding">
            <div class="container">
                <h2>Solicita tu Turno</h2>
                <form id="form-turnos">
                    <div class="form-group">
                        <label for="especialidad-turno">Especialidad:</label>
                        <select id="especialidad-turno" name="especialidad_id" required>
                            <option value="">Seleccione una especialidad</option>
                            <!-- Opciones se pueden cargar con JS o estar hardcodeadas -->
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="doctor-turno">Doctor:</label>
                        <select id="doctor-turno" name="doctor_id" required disabled>
                            <option value="">Seleccione un doctor</option>
                            <!-- Opciones se cargarán con JS según especialidad -->
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="fecha-turno">Fecha:</label>
                        <input type="date" id="fecha-turno" name="fecha" required>
                    </div>
                    <div class="form-group">
                        <label for="hora-turno">Hora:</label>
                        <select id="hora-turno" name="hora" required disabled>
                            <option value="">Seleccione una hora disponible</option>
                            <!-- Horas disponibles se cargarán con JS -->
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="nombre-paciente">Nombre Completo:</label>
                        <input type="text" id="nombre-paciente" name="nombre_paciente" required>
                    </div>
                    <div class="form-group">
                        <label for="dni-paciente">DNI:</label>
                        <input type="text" id="dni-paciente" name="dni_paciente" required>
                    </div>
                    <div class="form-group">
                        <label for="email-paciente">Email:</label>
                        <input type="email" id="email-paciente" name="email_paciente" required>
                    </div>
                    <div class="form-group">
                        <label for="telefono-paciente">Teléfono:</label>
                        <input type="tel" id="telefono-paciente" name="telefono_paciente">
                    </div>
                    <button type="submit" class="btn btn-primary">Confirmar Turno</button>
                </form>
                <div id="mensaje-turno" style="margin-top: 20px;"></div>
            </div>
        </section>

        <section id="ubicacion" class="section-padding">
            <div class="container">
                <h2>Nuestra Ubicación</h2>
                <div id="mapa" style="height: 400px; width: 100%;"></div>
                <p>Dirección: Calle Falsa 123, Ciudad, Provincia. (Actualiza esta dirección)</p>
            </div>
        </section>
    </main>

    <footer>
        <div class="container footer-container">
            <div class="footer-col">
                <h4>Consultorios Médicos</h4>
                <p>Comprometidos con tu salud y bienestar.</p>
                <!-- CAMBIA ESTO por la ruta a tu logo de footer si tienes uno diferente -->
                <img src="img/logo-footer.png" alt="Logo Footer" class="logo-footer">
            </div>
            <div class="footer-col">
                <h4>Contacto Rápido</h4>
                <p><i class="fas fa-phone"></i> <a href="tel:+541100000000">(011) 0000-0000</a></p>
                <p><i class="fas fa-envelope"></i> <a href="mailto:turnos@consultorio.com.ar">turnos@consultorio.com.ar</a></p>
                <p><i class="fas fa-map-marker-alt"></i> Calle Falsa 123, Ciudad.</p>
            </div>
            <div class="footer-col">
                <h4>Enlaces Útiles</h4>
                <ul>
                    <li><a href="#especialidades">Especialidades</a></li>
                    <li><a href="#turnos">Solicitar Turno</a></li>
                    <li><a href="#">Preguntas Frecuentes</a></li>
                    <li><a href="#">Políticas de Privacidad</a></li>
                </ul>
            </div>
            <div class="footer-col">
                <h4>Trabaja con Nosotros</h4>
                <p>Si eres un profesional de la salud y quieres unirte a nuestro equipo, envíanos tu CV.</p>
                <a href="mailto:rrhh@consultorio.com.ar?subject=CV%20Profesional" class="btn btn-secondary">Enviar CV</a>
            </div>
        </div>
        <div class="footer-bottom">
            <p>© <span id="currentYear"></span> Consultorios Médicos. Todos los derechos reservados.</p>
        </div>
    </footer>

    <!-- Leaflet JS para el mapa (DEBE IR ANTES DE TU main.js si main.js usa Leaflet) -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="js/main.js"></script>
</body>
</html>
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Html
IGNORE_WHEN_COPYING_END

Importante: Donde veas <!-- CAMBIA ESTO por la ruta a tu logo/icono -->, asegúrate de poner las rutas correctas a tus imágenes.

Pega el Código CSS Base:
Abre tu archivo css/style.css y pega el siguiente código. Este es un punto de partida, ¡tendrás que ajustarlo y expandirlo!

/* Reset básico y variables */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    --primary-color: #005A9C; /* Azul OSDE principal */
    --secondary-color: #00AEEF; /* Azul OSDE secundario */
    --accent-color: #FDB913; /* Amarillo para CTAs */
    --text-color: #333;
    --light-gray: #f4f4f4;
    --white: #fff;
    --font-primary: 'Helvetica Neue', Helvetica, Arial, sans-serif; /* Fuente similar a OSDE */
    --border-radius: 4px;
}

body {
    font-family: var(--font-primary);
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--white);
}

.container {
    width: 90%;
    max-width: 1100px;
    margin: 0 auto;
    padding: 0 15px;
}

a {
    text-decoration: none;
    color: var(--primary-color);
}

a:hover {
    color: var(--secondary-color);
}

img {
    max-width: 100%;
    height: auto;
    display: block;
}

h1, h2, h3, h4 {
    margin-bottom: 0.8rem;
    color: var(--primary-color);
}
h1 { font-size: 2.5rem; }
h2 { font-size: 2rem; }
h3 { font-size: 1.5rem; }

.btn {
    display: inline-block;
    padding: 10px 20px;
    border: none;
    border-radius: var(--border-radius);
    cursor: pointer;
    font-weight: bold;
    text-align: center;
    transition: background-color 0.3s ease;
}

.btn-primary {
    background-color: var(--accent-color);
    color: var(--text-color); /* O var(--white) si el accent es oscuro */
}
.btn-primary:hover {
    background-color: darken(var(--accent-color), 10%);
}

.btn-secondary {
    background-color: var(--secondary-color);
    color: var(--white);
}
.btn-secondary:hover {
    background-color: darken(var(--secondary-color), 10%);
}
.btn-tertiary {
    background-color: #ccc;
    color: var(--text-color);
}
.btn-tertiary:hover {
    background-color: #bbb;
}


/* Header */
header {
    background-color: var(--white);
    padding: 1rem 0;
    border-bottom: 1px solid #e0e0e0;
    position: sticky;
    top: 0;
    z-index: 1000;
}
.header-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
}
#logo {
    max-height: 50px; /* Ajusta según tu logo */
}
.nav-menu {
    list-style: none;
    display: flex;
}
.nav-menu li {
    margin-left: 25px;
}
.nav-menu li a {
    font-weight: 500;
}
.nav-toggle {
    display: none; /* Se muestra en mobile */
    background: none;
    border: none;
    font-size: 1.8rem;
    color: var(--primary-color);
    cursor: pointer;
}

/* Hero Banner */
.hero-banner {
    background: var(--primary-color) url('../img/banner-medico.jpg') no-repeat center center/cover; /* CAMBIA img/banner-medico.jpg por tu imagen de banner */
    color: var(--white);
    padding: 80px 0;
    text-align: center;
}
.hero-content h1 {
    color: var(--white);
    margin-bottom: 1rem;
}
.hero-content p {
    font-size: 1.2rem;
    margin-bottom: 2rem;
}

/* Secciones Generales */
.section-padding {
    padding: 60px 0;
}
.bg-light {
    background-color: var(--light-gray);
}

/* Especialidades */
.especialidades-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 30px;
}
.especialidad-card {
    background-color: var(--white);
    padding: 25px;
    border-radius: var(--border-radius);
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    text-align: center;
}
.especialidad-card img {
    max-height: 60px;
    margin: 0 auto 15px auto;
}
.especialidad-card h3 {
    color: var(--secondary-color);
}

/* Profesionales */
.profesionales-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
}
.profesional-card {
    background-color: var(--white);
    padding: 20px;
    border-radius: var(--border-radius);
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    text-align: center;
}
.profesional-card img {
    width: 120px;
    height: 120px;
    border-radius: 50%;
    object-fit: cover;
    margin: 0 auto 15px auto;
    border: 3px solid var(--secondary-color);
}
.profesional-card .bio {
    font-size: 0.9rem;
    color: #555;
}

/* Formulario de Turnos */
#form-turnos {
    background-color: var(--white);
    padding: 30px;
    border-radius: var(--border-radius);
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}
.form-group {
    margin-bottom: 20px;
}
.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
    color: var(--primary-color);
}
.form-group input[type="text"],
.form-group input[type="email"],
.form-group input[type="tel"],
.form-group input[type="date"],
.form-group select {
    width: 100%;
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: var(--border-radius);
    font-size: 1rem;
}
.form-group select[disabled] {
    background-color: #e9ecef;
    opacity: 0.7;
}
#mensaje-turno {
    font-weight: bold;
    padding: 10px;
    border-radius: var(--border-radius);
}


/* Ubicación / Mapa */
#mapa {
    border-radius: var(--border-radius);
    border: 1px solid #ddd;
}

/* Footer */
footer {
    background-color: var(--primary-color);
    color: var(--light-gray);
    padding: 40px 0 20px 0;
}
.footer-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 30px;
    margin-bottom: 30px;
}
.footer-col h4 {
    color: var(--white);
    margin-bottom: 15px;
    position: relative;
}
.footer-col h4::after { /* Pequeño subrayado decorativo */
    content: '';
    width: 50px;
    height: 2px;
    background-color: var(--secondary-color);
    position: absolute;
    bottom: -5px;
    left: 0;
}
.footer-col p, .footer-col ul li {
    margin-bottom: 10px;
    font-size: 0.95rem;
}
.footer-col ul {
    list-style: none;
}
.footer-col a {
    color: var(--light-gray);
}
.footer-col a:hover {
    color: var(--secondary-color);
    text-decoration: underline;
}
.logo-footer {
    max-height: 40px;
    margin-top: 10px;
}
.footer-bottom {
    text-align: center;
    padding-top: 20px;
    border-top: 1px solid rgba(255,255,255,0.2);
    font-size: 0.9rem;
}

/* Responsive */
@media (max-width: 768px) {
    .header-container {
        flex-direction: column; /* Logo arriba, menú abajo */
    }
    .logo-container { /* Para centrar el logo */
        width: 100%;
        display: flex;
        justify-content: center;
        margin-bottom: 15px;
    }
    .nav-menu {
        display: none; /* Oculto por defecto */
        flex-direction: column;
        width: 100%;
        text-align: center;
        background-color: var(--white); /* Fondo para el menú desplegable */
        position: absolute;
        top: 80px; /* Ajusta según altura del header */
        left: 0;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .nav-menu.active {
        display: flex; /* Se muestra con JS */
    }
    .nav-menu li {
        margin: 0;
        border-bottom: 1px solid #f0f0f0;
    }
    .nav-menu li a {
        display: block;
        padding: 15px;
    }
    .nav-toggle {
        display: block; /* Mostrar botón hamburguesa */
        position: absolute; /* Para posicionarlo si el logo no está centrado */
        top: 25px; /* Ajusta según tu diseño */
        right: 20px; /* Ajusta según tu diseño */
    }

    .hero-banner { padding: 60px 0; }
    .hero-content h1 { font-size: 2rem; }

    .footer-container {
        grid-template-columns: 1fr; /* Columnas apiladas en mobile */
        text-align: center;
    }
    .footer-col h4::after {
        left: 50%;
        transform: translateX(-50%);
    }
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
Css
IGNORE_WHEN_COPYING_END

Nota: La parte de @media (max-width: 768px) es para el diseño responsive. El .logo-container ahora centrará el logo y el .nav-toggle se mostrará.

Pega el Código JavaScript Inicial:
Abre tu archivo js/main.js y pega el siguiente código. Este código incluye la lógica para el menú hamburguesa, mostrar profesionales, el mapa y una simulación inicial para el formulario de turnos (aún no se conecta a ninguna base de datos).

document.addEventListener('DOMContentLoaded', function() {

    // --- DATOS (simulados, luego vendrán del backend) ---
    const profesionalesData = {
        traumatologia: [
            { id: 1, nombre: "Dr. Juan Pérez", matricula: "MN 12345", foto: "img/dr-perez.jpg", bio: "Especialista en rodilla y cadera, artroscopias y reemplazos articulares." },
            { id: 2, nombre: "Dra. Ana Gómez", matricula: "MN 67890", foto: "img/dra-gomez.jpg", bio: "Experta en medicina deportiva y rehabilitación de lesiones de hombro y codo." }
        ],
        pediatria: [
            { id: 3, nombre: "Dr. Carlos López", matricula: "MN 11223", foto: "img/dr-lopez.jpg", bio: "Pediatra con enfoque en neonatología y seguimiento del desarrollo infantil." },
            { id: 4, nombre: "Dra. Laura Fernández", matricula: "MN 44556", foto: "img/dra-fernandez.jpg", bio: "Atención integral del niño y adolescente, puericultura y vacunas." }
        ],
        neurologia: [
            { id: 5, nombre: "Dr. Martín Rodríguez", matricula: "MN 77889", foto: "img/dr-rodriguez.jpg", bio: "Especializado en enfermedades neurodegenerativas como Alzheimer y Parkinson." },
            { id: 6, nombre: "Dra. Sofía Torres", matricula: "MN 99001", foto: "img/dra-torres.jpg", bio: "Neurología clínica general, cefaleas, epilepsia y trastornos del sueño." }
        ]
    };
    // Asegúrate de tener imágenes en img/ con esos nombres o cambia las rutas

    const especialidadesParaTurnos = [
        { id_db: 1, clave_js: 'traumatologia', nombre: 'Traumatología' }, // Asumimos que 1 es el ID en BD para traumatologia
        { id_db: 2, clave_js: 'pediatria', nombre: 'Pediatría' },     // Asumimos que 2 es el ID en BD para pediatria
        { id_db: 3, clave_js: 'neurologia', nombre: 'Neurología' }    // Asumimos que 3 es el ID en BD para neurologia
    ];


    // --- MENÚ HAMBURGUESA ---
    const navToggle = document.querySelector('.nav-toggle');
    const navMenu = document.querySelector('.nav-menu');
    if (navToggle && navMenu) {
        navToggle.addEventListener('click', () => {
            navMenu.classList.toggle('active');
            // Cambiar icono de hamburguesa a X y viceversa
            const icon = navToggle.querySelector('i');
            if (navMenu.classList.contains('active')) {
                icon.classList.remove('fa-bars');
                icon.classList.add('fa-times');
            } else {
                icon.classList.remove('fa-times');
                icon.classList.add('fa-bars');
            }
        });
    }

    // --- MOSTRAR/OCULTAR PROFESIONALES ---
    const botonesVerProfesionales = document.querySelectorAll('.especialidad-card .btn-ver-profesionales');
    const seccionProfesionales = document.getElementById('profesionales');
    const listaProfesionalesDiv = document.getElementById('lista-profesionales');
    const nombreEspecialidadSeleccionadaSpan = document.getElementById('nombre-especialidad-seleccionada');
    const btnCerrarProfesionales = document.getElementById('btn-cerrar-profesionales');

    botonesVerProfesionales.forEach(button => {
        button.addEventListener('click', (e) => {
            const card = e.target.closest('.especialidad-card');
            const especialidadKey = card.dataset.especialidad; // 'traumatologia', 'pediatria', etc.
            const profesionales = profesionalesData[especialidadKey];
            
            const especialidadNombre = card.querySelector('h3').textContent;
            if(nombreEspecialidadSeleccionadaSpan) nombreEspecialidadSeleccionadaSpan.textContent = `- ${especialidadNombre}`;
            
            if(listaProfesionalesDiv) listaProfesionalesDiv.innerHTML = ''; // Limpiar anteriores

            if (profesionales && listaProfesionalesDiv) {
                profesionales.forEach(prof => {
                    const profHTML = `
                        <div class="profesional-card">
                            <img src="${prof.foto}" alt="Foto de ${prof.nombre}">
                            <h4>${prof.nombre}</h4>
                            <p>Matrícula: ${prof.matricula}</p>
                            <p class="bio">${prof.bio}</p>
                        </div>
                    `;
                    listaProfesionalesDiv.innerHTML += profHTML;
                });
                if(seccionProfesionales) {
                    seccionProfesionales.style.display = 'block';
                    seccionProfesionales.scrollIntoView({ behavior: 'smooth' });
                }
            }
        });
    });

    if (btnCerrarProfesionales && seccionProfesionales) {
        btnCerrarProfesionales.addEventListener('click', () => {
            seccionProfesionales.style.display = 'none';
            const seccionEspecialidades = document.getElementById('especialidades');
            if (seccionEspecialidades) seccionEspecialidades.scrollIntoView({ behavior: 'smooth' });
        });
    }

    // --- MAPA CON LEAFLET.JS ---
    const mapaDiv = document.getElementById('mapa');
    if (mapaDiv) {
        const map = L.map('mapa').setView([-34.64948297063554, -58.78710022512634], 15);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        L.marker([-34.64948297063554, -58.78710022512634]).addTo(map)
            .bindPopup('Consultorios Médicos Aquí.<br> Calle Falsa 123.')
            .openPopup();
    }

    // --- FORMULARIO DE TURNOS (LÓGICA FRONTEND INICIAL) ---
    const selectEspecialidadTurno = document.getElementById('especialidad-turno');
    const selectDoctorTurno = document.getElementById('doctor-turno');
    const selectHoraTurno = document.getElementById('hora-turno');
    const formTurnos = document.getElementById('form-turnos');
    const mensajeTurnoDiv = document.getElementById('mensaje-turno');
    const inputFechaTurno = document.getElementById('fecha-turno');

    // Cargar especialidades en el select de turnos
    function cargarEspecialidadesSelect() {
        if (!selectEspecialidadTurno) return;
        especialidadesParaTurnos.forEach(esp => {
            const option = document.createElement('option');
            option.value = esp.clave_js; // Usamos la clave_js para buscar en profesionalesData
            option.dataset.idDb = esp.id_db; // Guardamos el ID de la BD aquí
            option.textContent = esp.nombre;
            selectEspecialidadTurno.appendChild(option);
        });
    }
    
    if(selectEspecialidadTurno) cargarEspecialidadesSelect();

    // Cargar doctores cuando se selecciona una especialidad
    if (selectEspecialidadTurno) {
        selectEspecialidadTurno.addEventListener('change', function() {
            const especialidadKey = this.value; // 'traumatologia', etc.
            
            if(selectDoctorTurno) {
                selectDoctorTurno.innerHTML = '<option value="">Seleccione un doctor</option>'; // Limpiar
                selectDoctorTurno.disabled = true;
            }
            if(selectHoraTurno) {
                selectHoraTurno.innerHTML = '<option value="">Seleccione una hora disponible</option>';
                selectHoraTurno.disabled = true;
            }


            if (especialidadKey && profesionalesData[especialidadKey] && selectDoctorTurno) {
                profesionalesData[especialidadKey].forEach(doc => {
                    const option = document.createElement('option');
                    option.value = doc.id; // ID numérico del doctor
                    option.textContent = doc.nombre;
                    selectDoctorTurno.appendChild(option);
                });
                selectDoctorTurno.disabled = false;
            }
        });
    }

    // Cargar horas disponibles (simulado) cuando se selecciona un doctor y fecha
    function cargarHorasDisponibles() {
        if (!selectDoctorTurno || !inputFechaTurno || !selectHoraTurno) return;
        
        // Aquí idealmente harías una llamada fetch al backend para obtener horarios
        // Para simular:
        selectHoraTurno.innerHTML = '<option value="">Seleccione una hora disponible</option>';
        if(selectDoctorTurno.value && inputFechaTurno.value) { // Si hay un doctor y fecha seleccionados
            const horasMock = ["09:00", "09:30", "10:00", "10:30", "11:00", "15:00", "15:30", "16:00"];
            horasMock.forEach(hora => {
                const option = new Option(hora, hora);
                selectHoraTurno.add(option);
            });
            selectHoraTurno.disabled = false;
        } else {
            selectHoraTurno.disabled = true;
        }
    }

    if(selectDoctorTurno) selectDoctorTurno.addEventListener('change', cargarHorasDisponibles);
    if(inputFechaTurno) inputFechaTurno.addEventListener('change', cargarHorasDisponibles);


    // Envío del Formulario (simulado, luego irá al backend)
    if (formTurnos) {
        formTurnos.addEventListener('submit', async function(e) {
            e.preventDefault();
            if(mensajeTurnoDiv) mensajeTurnoDiv.textContent = 'Procesando solicitud...';
            
            const formData = new FormData(this);
            const data = Object.fromEntries(formData.entries());

            // Obtener el ID de especialidad para la base de datos
            const selectedEspecialidadOption = selectEspecialidadTurno.options[selectEspecialidadTurno.selectedIndex];
            data.especialidad_id_db = selectedEspecialidadOption ? selectedEspecialidadOption.dataset.idDb : null;
            // data.doctor_id ya está (es el value del select de doctores)

            console.log("Datos a enviar (simulado):", data);

            // SIMULACIÓN DE LLAMADA A API (reemplazar con fetch real más adelante)
            setTimeout(() => {
                const exito = Math.random() > 0.3; // Simular éxito o fallo
                if (exito) {
                    if(mensajeTurnoDiv) {
                        mensajeTurnoDiv.textContent = `Turno solicitado con éxito para el ${data.fecha} a las ${data.hora}. Nos comunicaremos para confirmar.`;
                        mensajeTurnoDiv.style.color = 'green';
                        mensajeTurnoDiv.style.backgroundColor = '#e6ffed';
                        mensajeTurnoDiv.style.border = '1px solid green';
                    }
                    formTurnos.reset();
                    // Resetear selects dependientes
                    if(selectDoctorTurno) {
                        selectDoctorTurno.innerHTML = '<option value="">Seleccione un doctor</option>';
                        selectDoctorTurno.disabled = true;
                    }
                    if(selectHoraTurno) {
                        selectHoraTurno.innerHTML = '<option value="">Seleccione una hora disponible</option>';
                        selectHoraTurno.disabled = true;
                    }
                    if(selectEspecialidadTurno) selectEspecialidadTurno.value = "";

                } else {
                    if(mensajeTurnoDiv) {
                        mensajeTurnoDiv.textContent = `Error: No se pudo solicitar el turno en este momento. Intente más tarde.`;
                        mensajeTurnoDiv.style.color = 'red';
                        mensajeTurnoDiv.style.backgroundColor = '#ffe6e6';
                        mensajeTurnoDiv.style.border = '1px solid red';
                    }
                }
            }, 1500);
        });
    }


    // --- AÑO ACTUAL EN FOOTER ---
    const currentYearSpan = document.getElementById('currentYear');
    if(currentYearSpan) {
        currentYearSpan.textContent = new Date().getFullYear();
    }

}); // Fin de DOMContentLoaded
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

Importante:

Asegúrate de tener imágenes dr-perez.jpg, dra-gomez.jpg, etc., en tu carpeta img/ o cambia las rutas en profesionalesData.

La parte del formulario de turnos por ahora solo muestra un mensaje en la consola y simula una respuesta. La conexión real vendrá después.

Abre index.html en tu Navegador:
Ahora, si abres index.html en tu navegador web (Chrome, Firefox, etc.), deberías ver la estructura básica de tu página, con algunos estilos y la funcionalidad del menú responsive, el mapa y la sección de profesionales (que se muestra al hacer clic).

FASE 2: Backend con Node.js y PostgreSQL (Conexión de Turnos)

Esta fase es más compleja y requiere que tengas Node.js y PostgreSQL instalados.

Instala Node.js y PostgreSQL: Si no los tienes, descárgalos e instálalos desde sus sitios oficiales.

Crea tu Base de Datos "cerebro" y las Tablas:

Abre una terminal de psql o una herramienta gráfica como pgAdmin.

Crea la base de datos: CREATE DATABASE cerebro;

Conéctate a la base de datos: \c cerebro

Crea las tablas (adapta esto a tus necesidades exactas):

CREATE TABLE Especialidades (
    id_especialidad SERIAL PRIMARY KEY,
    nombre_especialidad VARCHAR(100) UNIQUE NOT NULL
);

CREATE TABLE Doctores (
    id_doctor SERIAL PRIMARY KEY,
    nombre_completo VARCHAR(150) NOT NULL,
    matricula VARCHAR(50) UNIQUE,
    id_especialidad INTEGER REFERENCES Especialidades(id_especialidad),
    foto_url VARCHAR(255),
    bio TEXT
);

-- Insertar especialidades de ejemplo (IMPORTANTE: los ID deben coincidir con lo que esperas en el JS o backend)
INSERT INTO Especialidades (nombre_especialidad) VALUES ('Traumatología'); -- id_especialidad será 1
INSERT INTO Especialidades (nombre_especialidad) VALUES ('Pediatría');     -- id_especialidad será 2
INSERT INTO Especialidades (nombre_especialidad) VALUES ('Neurología');    -- id_especialidad será 3

-- Insertar doctores de ejemplo (asegúrate que los id_especialidad coincidan con los de arriba)
-- Usa los ID que se generaron para las especialidades
-- (Asumiendo que Traumatología es 1, Pediatría 2, Neurología 3)
INSERT INTO Doctores (nombre_completo, matricula, id_especialidad, foto_url, bio) VALUES
('Dr. Juan Pérez', 'MN 12345', 1, 'img/dr-perez.jpg', 'Especialista en rodilla y cadera...'),
('Dra. Ana Gómez', 'MN 67890', 1, 'img/dra-gomez.jpg', 'Experta en medicina deportiva...'),
('Dr. Carlos López', 'MN 11223', 2, 'img/dr-lopez.jpg', 'Pediatra con enfoque en neonatología...'),
('Dra. Laura Fernández', 'MN 44556', 2, 'img/dra-fernandez.jpg', 'Atención integral del niño...'),
('Dr. Martín Rodríguez', 'MN 77889', 3, 'img/dr-rodriguez.jpg', 'Especializado en enfermedades neurodegenerativas...'),
('Dra. Sofía Torres', 'MN 99001', 3, 'img/dra-torres.jpg', 'Neurología clínica y neurofisiología...');


CREATE TABLE Pacientes (
    id_paciente SERIAL PRIMARY KEY,
    nombre_completo VARCHAR(150) NOT NULL,
    dni VARCHAR(20) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    telefono VARCHAR(50)
);

CREATE TABLE Turnos (
    id_turno SERIAL PRIMARY KEY,
    id_doctor INTEGER REFERENCES Doctores(id_doctor) NOT NULL,
    id_paciente INTEGER REFERENCES Pacientes(id_paciente) NOT NULL,
    id_especialidad_turno INTEGER REFERENCES Especialidades(id_especialidad), -- Para saber a qué especialidad se solicitó
    fecha_hora_turno TIMESTAMP NOT NULL,
    estado VARCHAR(50) DEFAULT 'solicitado', -- ej: solicitado, confirmado, cancelado, asistio
    notas_paciente TEXT,
    fecha_solicitud TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
SQL
IGNORE_WHEN_COPYING_END

Configura tu Proyecto Node.js:

En la carpeta raíz de tu proyecto (consultorio-web), abre una terminal o línea de comandos.

Ejecuta: npm init -y (esto crea un package.json).

Instala las dependencias: npm install express pg cors

Crea una carpeta src dentro de consultorio-web. Dentro de src, crea:

config/db.js

controllers/turnoController.js

routes/turnoRoutes.js

server.js (o app.js)

consultorio-web/
├── ... (archivos del frontend)
├── src/
│   ├── config/
│   │   └── db.js
│   ├── controllers/
│   │   └── turnoController.js
│   ├── routes/
│   │   └── turnoRoutes.js
│   └── server.js
├── package.json
└── package-lock.json
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

Pega el Código del Backend:

src/config/db.js (Conexión a PostgreSQL):

const { Pool } = require('pg');

const pool = new Pool({
    user: 'tu_usuario_postgres', // CAMBIA ESTO
    host: 'localhost',
    database: 'cerebro',
    password: 'tu_contraseña_postgres', // CAMBIA ESTO
    port: 5432,
});

pool.connect((err) => {
    if (err) {
        console.error('Error al conectar con PostgreSQL:', err.stack);
    } else {
        console.log('Conexión a PostgreSQL establecida.');
    }
});

module.exports = pool;
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

¡IMPORTANTE! Cambia tu_usuario_postgres y tu_contraseña_postgres por tus credenciales reales.

src/controllers/turnoController.js (Lógica para manejar los turnos):

const pool = require('../config/db');

const solicitarTurno = async (req, res) => {
    const {
        especialidad_id_db, // Este es el id_especialidad de la tabla Especialidades
        doctor_id,          // Este es el id_doctor de la tabla Doctores
        fecha,
        hora,
        nombre_paciente,
        dni_paciente,
        email_paciente,
        telefono_paciente
    } = req.body;

    if (!especialidad_id_db || !doctor_id || !fecha || !hora || !nombre_paciente || !dni_paciente || !email_paciente) {
        return res.status(400).json({ message: "Faltan campos obligatorios." });
    }

    const fecha_hora_turno_str = `${fecha} ${hora}`; // Ejemplo: "2023-10-27 09:30"

    try {
        await pool.query('BEGIN'); // Iniciar transacción

        // 1. Verificar si el paciente existe, sino crearlo
        let pacienteResult = await pool.query('SELECT id_paciente FROM pacientes WHERE dni = $1', [dni_paciente]);
        let pacienteId;

        if (pacienteResult.rows.length > 0) {
            pacienteId = pacienteResult.rows[0].id_paciente;
            // Opcional: Actualizar datos del paciente si es necesario
            await pool.query(
                'UPDATE pacientes SET nombre_completo = $1, email = $2, telefono = $3 WHERE id_paciente = $4',
                [nombre_paciente, email_paciente, telefono_paciente, pacienteId]
            );
        } else {
            const nuevoPaciente = await pool.query(
                'INSERT INTO pacientes (nombre_completo, dni, email, telefono) VALUES ($1, $2, $3, $4) RETURNING id_paciente',
                [nombre_paciente, dni_paciente, email_paciente, telefono_paciente]
            );
            pacienteId = nuevoPaciente.rows[0].id_paciente;
        }

        // 2. Insertar el turno
        const resultTurno = await pool.query(
            'INSERT INTO turnos (id_doctor, id_paciente, id_especialidad_turno, fecha_hora_turno, estado) VALUES ($1, $2, $3, $4, $5) RETURNING id_turno, fecha_hora_turno',
            [doctor_id, pacienteId, especialidad_id_db, fecha_hora_turno_str, 'solicitado']
        );

        await pool.query('COMMIT'); // Confirmar transacción

        res.status(201).json({
            message: "Turno solicitado con éxito.",
            turno: resultTurno.rows[0]
        });

    } catch (error) {
        await pool.query('ROLLBACK'); // Revertir en caso de error
        console.error("Error al procesar turno:", error);
        // Verificar si es un error de duplicado de DNI o email para dar un mensaje más específico
        if (error.code === '23505') { // Código de error de violación de unicidad en PostgreSQL
             if (error.constraint && error.constraint.includes('dni')) {
                return res.status(409).json({ message: "Error: El DNI ya está registrado con otro nombre/email." });
             } else if (error.constraint && error.constraint.includes('email')) {
                return res.status(409).json({ message: "Error: El Email ya está registrado con otro nombre/DNI." });
             }
        }
        res.status(500).json({ message: "Error interno del servidor al procesar el turno." });
    }
};

// Podrías añadir funciones para obtener doctores por especialidad, horarios, etc.
// const getDoctoresPorEspecialidad = async (req, res) => { ... }
// const getHorariosDisponibles = async (req, res) => { ... }

module.exports = {
    solicitarTurno
};
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

src/routes/turnoRoutes.js (Define la ruta de la API):

const express = require('express');
const router = express.Router();
const { solicitarTurno } = require('../controllers/turnoController');

// Ruta para solicitar un nuevo turno
router.post('/solicitar', solicitarTurno);

// Aquí podrías añadir más rutas, ej:
// router.get('/doctores/:idEspecialidad', getDoctoresPorEspecialidadController);
// router.get('/horarios/:idDoctor/:fecha', getHorariosDisponiblesController);

module.exports = router;
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

src/server.js (Servidor Express):

const express = require('express');
const cors = require('cors');
const turnoRoutes = require('./routes/turnoRoutes');

const app = express();
const PORT = process.env.PORT || 3001; // Puerto para el backend, diferente al del frontend si lo sirves estáticamente

// Middlewares
app.use(cors()); // Habilitar CORS para permitir peticiones desde el frontend
app.use(express.json()); // Para parsear cuerpos de petición en formato JSON
app.use(express.urlencoded({ extended: true })); // Para parsear cuerpos de petición URL-encoded

// Rutas de la API
app.use('/api/turnos', turnoRoutes); // Todas las rutas en turnoRoutes estarán bajo /api/turnos

// Ruta de prueba
app.get('/', (req, res) => {
    res.send('API de Consultorio Médico funcionando!');
});

app.listen(PORT, () => {
    console.log(`Servidor backend corriendo en http://localhost:${PORT}`);
});
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

Modifica el JavaScript del Frontend (js/main.js) para llamar al Backend:
Busca la sección // Envío del Formulario (simulado, luego irá al backend) en tu js/main.js y reemplaza el setTimeout con la llamada fetch real:

// ... (código JS anterior) ...

    // Envío del Formulario (AHORA CONECTADO AL BACKEND)
    if (formTurnos) {
        formTurnos.addEventListener('submit', async function(e) {
            e.preventDefault();
            if(mensajeTurnoDiv) {
                mensajeTurnoDiv.textContent = 'Procesando solicitud...';
                mensajeTurnoDiv.style.color = 'inherit'; // Reset color
                mensajeTurnoDiv.style.backgroundColor = '#f0f0f0';
                mensajeTurnoDiv.style.border = '1px solid #ccc';
                mensajeTurnoDiv.scrollIntoView({behavior: "smooth", block: "center"});
            }
            
            const formData = new FormData(this);
            const dataPayload = {
                doctor_id: formData.get('doctor_id'),
                fecha: formData.get('fecha'),
                hora: formData.get('hora'),
                nombre_paciente: formData.get('nombre_paciente'),
                dni_paciente: formData.get('dni_paciente'),
                email_paciente: formData.get('email_paciente'),
                telefono_paciente: formData.get('telefono_paciente')
            };

            // Obtener el ID de especialidad para la base de datos desde el select
            const selectedEspecialidadOption = selectEspecialidadTurno.options[selectEspecialidadTurno.selectedIndex];
            dataPayload.especialidad_id_db = selectedEspecialidadOption ? selectedEspecialidadOption.dataset.idDb : null;


            try {
                // La URL debe coincidir con tu configuración de backend
                const response = await fetch('http://localhost:3001/api/turnos/solicitar', { 
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(dataPayload)
                });

                const result = await response.json(); // Siempre intenta parsear, incluso si hay error HTTP

                if (response.ok) { // Status 200-299
                    if(mensajeTurnoDiv) {
                        mensajeTurnoDiv.textContent = `${result.message} Fecha: ${new Date(result.turno.fecha_hora_turno).toLocaleString('es-AR')}. ID de Turno: ${result.turno.id_turno}.`;
                        mensajeTurnoDiv.style.color = 'green';
                        mensajeTurnoDiv.style.backgroundColor = '#e6ffed';
                        mensajeTurnoDiv.style.border = '1px solid green';
                    }
                    formTurnos.reset();
                    // Resetear selects dependientes
                    if(selectDoctorTurno) {
                        selectDoctorTurno.innerHTML = '<option value="">Seleccione un doctor</option>';
                        selectDoctorTurno.disabled = true;
                    }
                    if(selectHoraTurno) {
                        selectHoraTurno.innerHTML = '<option value="">Seleccione una hora disponible</option>';
                        selectHoraTurno.disabled = true;
                    }
                    if(selectEspecialidadTurno) selectEspecialidadTurno.value = "";
                } else {
                    // Error HTTP (4xx, 5xx)
                    if(mensajeTurnoDiv) {
                        mensajeTurnoDiv.textContent = `Error: ${result.message || 'No se pudo solicitar el turno. Intente más tarde.'}`;
                        mensajeTurnoDiv.style.color = 'red';
                        mensajeTurnoDiv.style.backgroundColor = '#ffe6e6';
                        mensajeTurnoDiv.style.border = '1px solid red';
                    }
                }
            } catch (error) { // Error de red o al parsear JSON (si la respuesta no es JSON válido)
                console.error('Error en fetch:', error);
                if(mensajeTurnoDiv) {
                    mensajeTurnoDiv.textContent = 'Error de conexión al solicitar el turno. Verifique la consola del navegador y el servidor.';
                    mensajeTurnoDiv.style.color = 'red';
                    mensajeTurnoDiv.style.backgroundColor = '#ffe6e6';
                    mensajeTurnoDiv.style.border = '1px solid red';
                }
            }
        });
    }

// ... (resto del código JS) ...
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
JavaScript
IGNORE_WHEN_COPYING_END

Ejecuta el Backend y Prueba:

Abre una terminal en la carpeta raíz (consultorio-web).

Ejecuta el servidor backend: node src/server.js

Deberías ver "Servidor backend corriendo en http://localhost:3001" y "Conexión a PostgreSQL establecida."

Abre (o refresca) tu index.html en el navegador.

Intenta solicitar un turno.

Revisa la consola del navegador (F12) y la terminal donde corre el backend para ver mensajes y posibles errores. Los turnos deberían guardarse en tu base de datos PostgreSQL.

¡Este es un gran comienzo! A partir de aquí, puedes refinar estilos, añadir más funcionalidades (como cargar doctores y horarios desde la BD), mejorar la validación, seguridad, etc. ¡Mucho éxito!